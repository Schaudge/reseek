
const char *usage_txt[] =
    {
"All-vs-all alignment (excluding self-hits)\n"
"    reseek -search STRUCTS -output hits.txt\n"
"\n"
"Search query against database\n"
"    reseek -search STRUCTS -db STRUCTS -output hits.txt\n"
"\n"
"Recommended format for database is .bca, e.g.\n"
"    reseek -convert /data/PDB_mirror/ -bca PDB.bca\n"
"\n"
"Align two structures\n"
"    reseek -search 1XYZ.pdb -db 2ABC.pdb -aln aln.txt\n"
"\n"
"Output options for -search\n"
"   -aln FILE     # Alignments in human-readable format\n"
"   -output FILE  # Hits in tabbed text format\n"
"   -columns name1+name2+name3...\n"
"                 # Output columns, names are\n"
"                 #   query   Query label\n"
"                 #   target  Target label\n"
"                 #   qlo     Start of aligment in query\n"
"                 #   qhi     End of aligment in query\n"
"                 #   tlo     Start of aligment in target\n"
"                 #   thi     End of aligment in target\n"
"                 #   ql      Query length\n"
"                 #   tl      Target length\n"
"                 #   pctid   Percent identity of alignment\n"
"                 #   cigar   CIGAR string\n"
"                 #   qrow    Aligned query sequence with gaps (local)\n"
"                 #   trow    Aligned target sequence with gaps (local)\n"
"                 #   qrowg   Aligned query sequence with gaps (global)\n"
"                 #   trowg   Aligned target sequence with gaps (global)\n"
"                 #   std     query+target+qlo+qhi+tlo+thi+pctid+evalue\n"
"                 # default evalue+query+target\n"
"\n"
"Search and alignment options\n"
"  -evalue E      # Max E-value (default 10)\n"
"  -omega X       # Omega accelerator (floating-point)\n"
"  -minu U        # K-mer accelerator (integer)\n"
"  -gapopen X     # Gap-open penalty (floating-point >= 0, default 0.7)\n"
"  -gapext X      # Gap-extend penalty (floating-point >= 0, default 0.05)\n"
"  -dbsize D      # Effective database size for E-value (default actual size)\n"
"\n"
"Convert between file formats\n"
"    reseek -convert STRUCTS [one or more output options]\n"
"           -bca FILENAME    # Output in .bca format\n"
"           -cal FILENAME    # Output in .cal format\n"
"           -fasta FILENAME  # Output in FASTA format\n"
"\n"
"STRUCTS argument is one of:\n"
"   DIRECTORYNAME              # A directory (and its sub-directories) is searched\n"
"                              #   for known file types including .pdb, .files etc.\n"
"   NAME.cif or NAME.mmcif     # PDBx/mmCIF file\n"
"   NAME.pdb                   # PDB file\n"
"   NAME.cal                   # C-alpha tabbed text format (may be many structures)\n"
"   NAME.bca                   # Binary C-alpha, recommended for larger databases\n"
"   NAME.files                 # Text file with one STRUCT per line,\n"
"                              #   may be a filename, directory or .files\n"
    };
